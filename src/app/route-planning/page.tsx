'use client';

import React, { useState, useMemo, useEffect } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { FormField, FormSection, FormActions } from '@/components/forms/FormField';
import { useForm } from '@/hooks/useForm';
import { useToast } from '@/components/ui/Toast';
import { 
  MapIcon, 
  MapPinIcon, 
  CalculatorIcon,
  TruckIcon,
  ClockIcon,
  CurrencyDollarIcon,
  SparklesIcon,
  BuildingOfficeIcon,
  PlusIcon,
  TrashIcon
} from '@heroicons/react/24/outline';

interface RouteFormData {
  origin: string;
  destination: string;
  waypoints: string[];
  vehicleType: string;
  weight: string;
  priority: string;
}

interface CompanyLocation {
  id: number;
  name: string;
  address: string;
  type: 'warehouse' | 'branch' | 'customer';
}

interface DistanceResult {
  distance: number;
  duration: number;
  route?: any;
}

interface RouteResult {
  optimizedRoute: string[];
  totalDistance: number;
  totalDuration: number;
  estimated_cost?: number;
}

export default function RoutePlanningPage() {
  const toast = useToast();
  
  const [distanceResult, setDistanceResult] = useState<DistanceResult | null>(null);
  const [routeResult, setRouteResult] = useState<RouteResult | null>(null);
  const [pricingResult, setPricingResult] = useState<any | null>(null);
  const [loadingDistance, setLoadingDistance] = useState(false);
  const [loadingRoute, setLoadingRoute] = useState(false);
  const [loadingPricing, setLoadingPricing] = useState(false);
  const [loadingLocations, setLoadingLocations] = useState(false);
  const [locations, setLocations] = useState<CompanyLocation[]>([]);

  const initialValues: RouteFormData = {
    origin: '',
    destination: '',
    waypoints: [],
    vehicleType: 'truck',
    weight: '5',
    priority: 'normal',
  };

  const { values, errors, touched, handleChange, handleBlur, resetForm } = useForm<RouteFormData>({
    initialValues,
    validationSchema: null,
    validateOnBlur: false,
  });

  const vehicleTypeOptions = [
    { value: 'truck', label: '‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å (Truck)' },
    { value: 'van', label: '‡∏£‡∏ñ‡∏ï‡∏π‡πâ (Van)' },
    { value: 'motorcycle', label: '‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå (Motorcycle)' },
    { value: 'pickup', label: '‡∏£‡∏ñ‡∏Å‡∏£‡∏∞‡∏ö‡∏∞ (Pickup)' },
  ];

  const priorityOptions = [
    { value: 'low', label: '‡∏ï‡πà‡∏≥ (Low)' },
    { value: 'normal', label: '‡∏õ‡∏Å‡∏ï‡∏¥ (Normal)' },
    { value: 'high', label: '‡∏™‡∏π‡∏á (High)' },
    { value: 'urgent', label: '‡∏î‡πà‡∏ß‡∏ô (Urgent)' },
  ];

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const loadCompanyLocations = async () => {
    setLoadingLocations(true);
    try {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const mockLocations: CompanyLocation[] = [
        {
          id: 1,
          name: '‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å',
          address: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà 123/456 ‡∏ñ.‡∏£‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏´‡∏á ‡πÅ‡∏Ç‡∏ß‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏°‡∏≤‡∏Å ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10240',
          type: 'warehouse'
        },
        {
          id: 2,
          name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏û‡∏±‡∏ó‡∏¢‡∏≤',
          address: '789/123 ‡∏ñ.‡∏û‡∏±‡∏ó‡∏¢‡∏≤‡πÉ‡∏ï‡πâ ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏õ‡∏£‡∏∑‡∏≠ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡∏≤‡∏á‡∏•‡∏∞‡∏°‡∏∏‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ 20150',
          type: 'branch'
        },
        {
          id: 3,
          name: '‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
          address: '321/654 ‡∏ñ.‡∏´‡πâ‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏ß ‡∏ï‡∏≥‡∏ö‡∏•‡∏™‡∏∏‡πÄ‡∏ó‡∏û ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50200',
          type: 'branch'
        },
        {
          id: 4,
          name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC',
          address: '‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10900',
          type: 'customer'
        },
        {
          id: 5,
          name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó XYZ',
          address: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ 11000',
          type: 'customer'
        }
      ];
      
      setLocations(mockLocations);
      toast.success('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏û‡∏ö ${mockLocations.length} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà`);
    } catch (error) {
      console.error('Error loading locations:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
    } finally {
      setLoadingLocations(false);
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select ‡∏à‡∏≤‡∏Å locations
  const locationOptions = useMemo(() => {
    const options = [{ value: '', label: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà', disabled: true }];
    
    locations.forEach(location => {
      const typeLabel = location.type === 'warehouse' ? 'üì¶ ‡∏Ñ‡∏•‡∏±‡∏á' : 
                       location.type === 'branch' ? 'üè¢ ‡∏™‡∏≤‡∏Ç‡∏≤' : 'üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤';
      options.push({
        value: location.address,
        label: `${typeLabel} ${location.name}`,
        disabled: false
      });
    });
    
    return options;
  }, [locations]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° waypoint ‡πÉ‡∏´‡∏°‡πà
  const addWaypoint = () => {
    const newWaypoints = [...values.waypoints, ''];
    Object.assign(values, { waypoints: newWaypoints });
    toast.info('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡πÉ‡∏´‡∏°‡πà', '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
  };

  // ‡∏•‡∏ö waypoint
  const removeWaypoint = (index: number) => {
    const newWaypoints = values.waypoints.filter((_, i) => i !== index);
    Object.assign(values, { waypoints: newWaypoints });
    toast.info('‡∏•‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡πÅ‡∏•‡πâ‡∏ß', '');
  };

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó waypoint
  const updateWaypoint = (index: number, value: string) => {
    const newWaypoints = [...values.waypoints];
    newWaypoints[index] = value;
    Object.assign(values, { waypoints: newWaypoints });
  };

  const handleCalculateDistance = async () => {
    if (!values.origin || !values.destination) {
      toast.error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á');
      return;
    }

    setLoadingDistance(true);
    try {
      const response = await fetch('http://localhost:8000/api/ai/distance/calculate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          origin_address: values.origin,
          destination_address: values.destination,
          waypoints: values.waypoints.filter(w => w.trim() !== '')
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      setDistanceResult(result);
      toast.success('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${result.distance} ‡∏Å‡∏°.`);
    } catch (error) {
      console.error('Distance calculation error:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ');
    } finally {
      setLoadingDistance(false);
    }
  };

  const handleOptimizeRoute = async () => {
    if (!values.origin || !values.destination) {
      toast.error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á');
      return;
    }

    setLoadingRoute(true);
    try {
      const validWaypoints = values.waypoints.filter(w => w.trim() !== '');
      const allWaypoints = [values.origin, ...validWaypoints, values.destination];

      const response = await fetch('http://localhost:8000/api/ai/route/optimize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          waypoints: allWaypoints,
          vehicle_type: values.vehicleType,
          priority: values.priority,
          constraints: {
            weight_limit: parseFloat(values.weight) || 5
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      setRouteResult(result);
      toast.success('‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß', `‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: ${result.totalDistance} ‡∏Å‡∏°.`);
    } catch (error) {
      console.error('Route optimization error:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ');
    } finally {
      setLoadingRoute(false);
    }
  };

  const handleCalculatePricing = async () => {
    if (!distanceResult && !routeResult) {
      toast.error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setLoadingPricing(true);
    try {
      const distance = distanceResult?.distance || routeResult?.totalDistance || 0;
      const response = await fetch('http://localhost:8000/api/ai/distance/pricing/truck', {
        method: 'GET',
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      setPricingResult({ ...result, calculatedFor: distance });
      toast.success('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('Pricing calculation error:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ');
    } finally {
      setLoadingPricing(false);
    }
  };

  const handleClearAll = () => {
    resetForm();
    setDistanceResult(null);
    setRouteResult(null);
    setPricingResult(null);
    toast.info('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß', '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
  };

  // Page context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Route Planning
  useEffect(() => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ document title ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    document.title = 'Route Planning - ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á | TMS AI Tools';
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    loadCompanyLocations();
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-black text-gray-800 flex items-center gap-3">
            <MapIcon className="w-8 h-8 text-blue-600" />
            Route Planning
          </h1>
          <p className="text-gray-600 mt-2">‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</p>
        </div>
        <Button
          variant="secondary"
          onClick={handleClearAll}
          className="flex items-center gap-2"
        >
          <SparklesIcon className="w-4 h-4" />
          ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card className="p-6">
          <div className="space-y-6">
            <FormSection
              title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á"
              description="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á"
            >
              <div className="space-y-4">
                <div className="flex items-center justify-between mb-4">
                  <span className="text-sm text-gray-600">
                    {locations.length > 0 ? `‡∏û‡∏ö ${locations.length} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•` : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'}
                  </span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={loadCompanyLocations}
                    loading={loadingLocations}
                    disabled={loadingLocations}
                    className="text-xs"
                  >
                    <BuildingOfficeIcon className="w-3 h-3 mr-1" />
                    ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </Button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    type="select"
                    name="origin"
                    label="‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
                    value={values.origin}
                    onChange={handleChange('origin')}
                    onBlur={handleBlur('origin')}
                    error={errors.origin}
                    touched={touched.origin}
                    options={locationOptions}
                    required
                    icon={<MapPinIcon className="w-5 h-5 text-green-500" />}
                  />

                  <FormField
                    type="select"
                    name="destination"
                    label="‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"
                    value={values.destination}
                    onChange={handleChange('destination')}
                    onBlur={handleBlur('destination')}
                    error={errors.destination}
                    touched={touched.destination}
                    options={locationOptions}
                    required
                    icon={<MapPinIcon className="w-5 h-5 text-red-500" />}
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-semibold text-gray-800">
                      ‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    </label>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={addWaypoint}
                      className="text-xs"
                    >
                      <PlusIcon className="w-3 h-3 mr-1" />
                      ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞
                    </Button>
                  </div>

                  {values.waypoints.map((waypoint, index) => (
                    <div key={index} className="flex items-end gap-2">
                      <div className="flex-1">
                        <FormField
                          type="select"
                          name={`waypoint-${index}`}
                          label={`‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏ó‡∏µ‡πà ${index + 1}`}
                          value={waypoint}
                          onChange={(e) => updateWaypoint(index, e.target.value)}
                          options={locationOptions}
                          icon={<MapIcon className="w-5 h-5 text-blue-500" />}
                        />
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeWaypoint(index)}
                        className="mb-2 text-red-500 hover:text-red-700"
                      >
                        <TrashIcon className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}

                  {values.waypoints.length === 0 && (
                    <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-lg">
                      <MapIcon className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á</p>
                      <p className="text-xs text-gray-400">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á</p>
                    </div>
                  )}
                </div>
              </div>
            </FormSection>

            <FormSection
              title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞"
              description="‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  type="select"
                  name="vehicleType"
                  label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞"
                  value={values.vehicleType}
                  onChange={handleChange('vehicleType')}
                  onBlur={handleBlur('vehicleType')}
                  error={errors.vehicleType}
                  touched={touched.vehicleType}
                  options={vehicleTypeOptions}
                  required
                />

                <FormField
                  type="number"
                  name="weight"
                  label="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å (‡∏ï‡∏±‡∏ô)"
                  value={values.weight}
                  onChange={handleChange('weight')}
                  onBlur={handleBlur('weight')}
                  error={errors.weight}
                  touched={touched.weight}
                  placeholder="5"
                  icon={<TruckIcon className="w-5 h-5" />}
                />
              </div>

              <FormField
                type="select"
                name="priority"
                label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"
                value={values.priority}
                onChange={handleChange('priority')}
                onBlur={handleBlur('priority')}
                error={errors.priority}
                touched={touched.priority}
                options={priorityOptions}
                required
              />
            </FormSection>

            <FormActions>
              <Button
                variant="primary"
                onClick={handleCalculateDistance}
                loading={loadingDistance}
                disabled={loadingDistance}
                className="flex items-center gap-2"
              >
                <CalculatorIcon className="w-4 h-4" />
                ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
              </Button>

              <Button
                variant="secondary"
                onClick={handleOptimizeRoute}
                loading={loadingRoute}
                disabled={loadingRoute}
                className="flex items-center gap-2"
              >
                <SparklesIcon className="w-4 h-4" />
                ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
              </Button>

              <Button
                variant="outline"
                onClick={handleCalculatePricing}
                loading={loadingPricing}
                disabled={loadingPricing}
                className="flex items-center gap-2"
              >
                <CurrencyDollarIcon className="w-4 h-4" />
                ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
              </Button>
            </FormActions>
          </div>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          {/* Distance Result */}
          {distanceResult && (
            <Card className="p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                <CalculatorIcon className="w-5 h-5 text-blue-600" />
                ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-blue-50 rounded-xl p-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-semibold text-blue-800">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á</span>
                    <span className="text-xl font-bold text-blue-900">
                      {distanceResult.distance.toFixed(1)} ‡∏Å‡∏°.
                    </span>
                  </div>
                </div>
                <div className="bg-green-50 rounded-xl p-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-semibold text-green-800">‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</span>
                    <span className="text-xl font-bold text-green-900 flex items-center gap-1">
                      <ClockIcon className="w-4 h-4" />
                      {Math.round(distanceResult.duration / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ
                    </span>
                  </div>
                </div>
              </div>
            </Card>
          )}

          {/* Route Optimization Result */}
          {routeResult && (
            <Card className="p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                <MapIcon className="w-5 h-5 text-green-600" />
                ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
              </h3>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-green-50 rounded-xl p-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-semibold text-green-800">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°</span>
                      <span className="text-xl font-bold text-green-900">
                        {routeResult.totalDistance.toFixed(1)} ‡∏Å‡∏°.
                      </span>
                    </div>
                  </div>
                  <div className="bg-purple-50 rounded-xl p-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-semibold text-purple-800">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</span>
                      <span className="text-xl font-bold text-purple-900 flex items-center gap-1">
                        <ClockIcon className="w-4 h-4" />
                        {Math.round(routeResult.totalDuration / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ
                      </span>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-50 rounded-xl p-4">
                  <h4 className="font-semibold text-gray-800 mb-2">‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
                  <ol className="space-y-1">
                    {routeResult.optimizedRoute.map((location, index) => (
                      <li key={index} className="flex items-center gap-2 text-sm text-gray-700">
                        <span className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">
                          {index + 1}
                        </span>
                        {location}
                      </li>
                    ))}
                  </ol>
                </div>

                {routeResult.estimated_cost && (
                  <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-semibold text-yellow-800">‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</span>
                      <span className="text-xl font-bold text-yellow-900">
                        ‡∏ø{routeResult.estimated_cost.toLocaleString()}
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          )}

          {/* Pricing Result */}
          {pricingResult && (
            <Card className="p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                <CurrencyDollarIcon className="w-5 h-5 text-yellow-600" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
              </h3>
              <div className="bg-yellow-50 rounded-xl p-4">
                <pre className="text-sm text-gray-800 whitespace-pre-wrap">
                  {JSON.stringify(pricingResult, null, 2)}
                </pre>
              </div>
            </Card>
          )}

          {/* Empty State */}
          {!distanceResult && !routeResult && !pricingResult && (
            <Card className="p-8 text-center">
              <MapIcon className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-600 mb-2">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
              <p className="text-gray-500">
                ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
              </p>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}